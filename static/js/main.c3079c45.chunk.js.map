{"version":3,"sources":["components/utils/Flex.tsx","utils/methods.ts","components/core/Form/CopyForm.tsx","components/core/Form/index.tsx","components/core/Output/index.tsx","components/core/index.tsx","components/shared/Header.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Flex","props","reducedProps","_props","args","key","includes","reduceProps","style","Object","freeze","display","rootEl","rootComponent","React","createElement","cloneElement","onClick","className","children","makeTarget","label","toLowerCase","replace","tryPasteJSON","a","navigator","clipboard","readText","raw_content","content","JSON","parse","console","error","CopyForm","enqueueSnackbar","useSnackbar","handlePaste","value","Array","isArray","overwriteFields","variant","alignItems","justifyContent","IconButton","copy","stringify","fields","err","typeSelectionOptions","useStyles","makeStyles","theme","root","Form","useState","newFieldName","setNewFieldName","newFieldType","setNewFieldType","classes","width","backgroundColor","padding","flex","height","Typography","noValidate","autoComplete","flexDirection","map","field","TextField","type","marginTop","marginBottom","marginRight","onChange","target","event","setField","id","aria-label","removeField","margin","select","option","MenuItem","Button","find","addField","pre","borderRadius","Output","json","forEach","makeJSON","minHeight","window","innerHeight","INITIAL_STATE","Core","setFields","_fields","getField","initialValue","alert","filter","translations","title","en_US","pl_PL","de_DE","language","translated","useLittera","useLitteraMethods","locale","locales","setLocale","gutterBottom","loc","App","maxSnack","initialLocale","Header","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c3079c45.chunk.js","sourcesContent":["import React from \"react\";\n\ntype FlexAlignType =\n  | 'flex-start'\n  | 'flex-end'\n  | 'center'\n  | 'stretch'\n  | 'baseline'\n\ntype FlexProperties = {\n  inline?: boolean\n  flexDirection?: 'row' | 'column' | 'row-reverse' | 'column-reverse'\n  flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse'\n  justifyContent?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n  alignContent?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'stretch'\n    | 'space-between'\n    | 'space-around'\n  alignItems?: FlexAlignType\n}\n\ntype FlexProps = {\n  children: React.ReactNode\n  className?: string\n  onClick?: () => void\n  rootComponent?: React.Component\n  style?: object\n  width?: number | string\n  height?: number | string\n} & FlexProperties\n\nconst reduceProps = (props: FlexProps, ...args: string[]) => {\n    let _props = {...props};\n\n    for(var key in _props) {\n        // @ts-ignore\n        if(args.includes(key)) delete _props[key];\n    }\n\n    return _props;\n}\n\n/**\n * A component for easier flex-box implementation.\n * @example <Flex justifyContent=\"space-between\" alignItems=\"center\">...</Flex>\n */\nconst Flex = (props: FlexProps) => {\n  const reducedProps = reduceProps(props, \"children\", \"className\");\n\n  const style = Object.freeze({\n      display: \"flex\",\n      ...reducedProps,\n      ...props.style\n  });\n\n  const rootEl = props.rootComponent ?? React.createElement(\"div\");\n\n  return React.cloneElement(rootEl as React.ReactElement<any>, { onClick: props.onClick, style, className: props.className, children: props.children });\n}\n\nexport default Flex;","import { Field } from \"../components/core\";\n\nexport function makeTarget(label: Field[\"label\"]) {\n    return label.toLowerCase().replace(/ /g, \"_\"); // eg. First name => first_name\n    \n}\n\nexport function makeJSON(fields: Field[]) {\n    const json: {[key: string]: Field[\"value\"]} = {};\n\n    fields.forEach(field => {\n        json[field.target] = field.value;\n    });\n\n    return json;\n}\n\nexport const tryPasteJSON = async (): Promise<Field[] | null> => {\n    const raw_content = await navigator.clipboard.readText();\n\n    try {\n        const content = JSON.parse(raw_content) as Field[];\n        return content;\n    } catch (err) {\n        console.error(err)\n        return null;\n    }\n}","import { IconButton } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Field } from \"..\";\nimport Flex from \"../../utils/Flex\";\nimport copy from \"copy-to-clipboard\";\nimport { tryPasteJSON } from \"../../../utils/methods\";\n\nimport CopyIcon from '@material-ui/icons/FileCopy';\nimport PasteIcon from '@material-ui/icons/Assignment';\nimport { useSnackbar } from \"notistack\";\n\nconst CopyForm = (props: { fields: Field[], overwriteFields: (value: Field[]) => void }) => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleCopy = () => {\n        try {\n            copy(JSON.stringify(props.fields));\n            enqueueSnackbar(\"Form template copied to clipboard\", { variant: 'info' });\n        } catch (err) {\n            enqueueSnackbar(\"Couldn't copy to clipboard\", { variant: 'error' });\n        }\n    }\n\n    const handlePaste = async () => {\n        const value = await tryPasteJSON();\n\n        if (value !== null && Array.isArray(value)) {\n            props.overwriteFields(value);\n            enqueueSnackbar(\"Form template pasted from clipboard\", { variant: 'info' });\n        } else {\n            enqueueSnackbar(\"Couldn't paste from clipboard\", { variant: 'error' });\n        }\n    }\n\n    return <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <IconButton onClick={handleCopy} ><CopyIcon /></IconButton>\n        <IconButton onClick={handlePaste}><PasteIcon /></IconButton>\n    </Flex>\n}\n\n\n\nexport default CopyForm;","import React, { useState } from 'react';\nimport { Field } from \"../index\";\nimport { Button, IconButton, TextField, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Flex from '../../utils/Flex';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CopyForm from './CopyForm';\n\nconst typeSelectionOptions = [\n  {\n    value: 'string',\n    label: 'Text',\n  },\n  {\n    value: 'number',\n    label: 'Number',\n  },\n];\n  \nconst useStyles = makeStyles((theme) => ({\n  root: {\n\n  },\n}));\n\n\ntype FormProps = { \n  fields:   Field[];\n  getField: (target: Field[\"target\"]) => Field | undefined;\n  setField: (target: Field[\"target\"], value: Field[\"value\"]) => void;\n  addField: (label: Field[\"label\"], type: Field[\"type\"], initialValue?: Field[\"value\"]) => void;\n  removeField: (target: Field[\"target\"]) => void;\n  overwriteFields: (value: Field[]) => void;\n}\n\nfunction Form(props: FormProps ) {\n  const [newFieldName, setNewFieldName] = useState(\"\");\n  const [newFieldType, setNewFieldType] = useState<Field[\"type\"]>(\"string\");\n  const classes = useStyles();\n\n  const handleChange = (target: Field[\"target\"]) => (event: any) => {\n    const value = event?.target?.value ?? \"\";\n    props.setField(target, value);\n  }\n\n  const handleNewFieldValueChange = (event: any) => setNewFieldName(event?.target?.value ?? \"\")\n  const handleFieldAddition = () => {\n    if(newFieldName && newFieldType && !props.fields.find(field => field.target === newFieldName)) {\n      props.addField(newFieldName, newFieldType, getInitialValueByType(newFieldType));\n      setNewFieldName(\"\");\n    }\n  }\n\n  const handleNewFieldTypeChange = (event: any) => {\n    setNewFieldType(event?.target?.value ?? \"string\");\n  };\n\n  return (\n    <div style={{width: \"30%\", backgroundColor: \"#eee\", padding: \"20px 30px\", flex: 1, height: \"calc(100vh - 104px)\"}}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Typography variant=\"h4\">Form</Typography>\n        <CopyForm fields={props.fields} overwriteFields={props.overwriteFields} />\n      </Flex>\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      {/* <TextField value={props.firstNameValue} onChange={handleFirstNameValueChange} id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" /> */}\n      <Flex flexDirection=\"column\" width=\"100%\">\n        {\n          props.fields.map(field => {\n            return <Flex alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n              <TextField type={field.type === \"number\" ? \"number\" : \"text\"} style={{marginTop: \"20px\", marginBottom: \"20px\", marginRight: \"10px\", width: \"85%\"}} value={field.value} onChange={handleChange(field.target)} id={field.target} key={field.target} label={field.label} variant=\"outlined\" />\n              <IconButton aria-label=\"delete\" onClick={() => props.removeField(field.target)}><DeleteIcon /></IconButton>\n            </Flex>\n          })\n        }\n      </Flex>\n    </form>\n\n    <Flex alignItems=\"center\" justifyContent=\"flex-start\" width=\"100%\" >\n      <TextField label=\"New field label\" style={{flex: 2}} value={newFieldName} variant=\"filled\" onChange={handleNewFieldValueChange} />\n      \n      \n      <TextField\n        style={{flex: 1, margin: \"0 10px\"}}\n        id=\"standard-select-type\"\n        select\n        label=\"Field type\"\n        value={newFieldType}\n        onChange={handleNewFieldTypeChange}\n        variant=\"filled\"\n      >\n        {typeSelectionOptions.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n      \n      <Button style={{height: \"56px\", flex: 1}} variant=\"outlined\" onClick={handleFieldAddition}>Add field</Button>\n    </Flex>\n\n    </div>\n  );\n}\n\nfunction getInitialValueByType(type: Field[\"type\"]) {\n  if(type === \"number\") return 0;\n\n  return \"\"; // For \"string\" option.\n}\n\nexport default Form;\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from \"@material-ui/styles\";\nimport React from 'react';\nimport { Field } from '..';\nimport copy from \"copy-to-clipboard\";\nimport { makeJSON } from '../../../utils/methods';\n\nconst useStyles = makeStyles((theme) => ({\n  pre: {\n    padding: \"12px 18px\",\n    backgroundColor: \"#f4f4f4\",\n    borderRadius: 16\n  }\n}))\n\nfunction Output(props: {fields: Field[]}) {\n  const classes = useStyles();\n\n  const handleCopy = () => {\n    copy(JSON.stringify(props.fields, null, 2));\n  }\n\n  return (\n    <div style={{width: \"30%\", padding: \"20px 30px\", flex: 1, height: \"100%\"}}>\n      <Typography variant=\"h4\">Output</Typography>\n      {/* <p>{props.firstNameValue}</p> */}\n      {/* {\n        props.fields.map(field => <p key={field.target}>{field.target}: {field.value}</p>)\n      } */}\n      <pre className={classes.pre}>{JSON.stringify(makeJSON(props.fields), null, 2)}</pre>\n      <Button variant=\"outlined\" onClick={handleCopy}>Copy</Button>\n    </div>\n  );\n}\n\nexport default Output;","import React, { useState } from 'react';\nimport Flex from '../utils/Flex';\nimport Form from './Form';\nimport Output from './Output';\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { makeTarget } from \"../../utils/methods\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minHeight: `${window.innerHeight - 64}px`\n    }\n}))\n\nexport type Field = { value: string | number, target: string, label: string, type: \"string\" | \"number\" }\n\nconst INITIAL_STATE: Field[] = [\n    { value: \"Foo\", target: \"first_name\", label: \"First name\", type: \"string\" },\n    { value: \"Bar\", target: \"last_name\", label: \"Last name\", type: \"string\" },\n    { value: \"https://lol.com/url.jpg\", target: \"image\", label: \"Image\", type: \"string\" },\n    { value: 18, target: \"age\", label: \"Age\", type: \"number\" }\n]\n\nfunction Core() {\n    const classes = useStyles();\n    const [fields, setFields] = useState(INITIAL_STATE);\n    \n    const getField = (target: Field[\"target\"]) => {\n        return fields.find(field => field.target === target);\n     }\n     const setField = (target: Field[\"target\"], value: Field[\"value\"]) => {\n        setFields(_fields => \n            _fields.map(field => field.target === target ? {...field, value} : field)\n        )\n    }\n    const addField = (label: Field[\"label\"], type: Field[\"type\"], initialValue: Field[\"value\"] = \"\") => {\n        setFields(_fields => {\n            if(_fields.find(field => makeTarget(label) === field.target)) {\n                alert(\"Field already exists!\");\n                return _fields;\n            }\n\n            return ([..._fields, { label, target: makeTarget(label), value: initialValue, type }])\n        } );\n    }\n    const removeField = (target: Field[\"target\"]) => {\n        setFields(_fields => _fields.filter(field => field.target !== target));\n    }\n    const overwriteFields = (value: Field[]) => {\n        setFields(value);\n    }\n\n    return (\n        <div className={classes.root}>\n            <Flex alignItems=\"flex-start\" height=\"100%\">\n                <Form fields={fields} setField={setField} getField={getField} addField={addField} removeField={removeField} overwriteFields={overwriteFields} />\n                <Output fields={fields} />\n            </Flex>\n        </div>\n    );\n}\n\nexport default Core;\n","import React from 'react';\nimport { useLittera, useLitteraMethods } from \"react-littera\";\nimport { Typography, TextField, MenuItem } from \"@material-ui/core\"\nimport Flex from \"../utils/Flex\";\n\nconst translations = {\n    title: {\n        en_US: \"Form to JSON\",\n        pl_PL: \"Formularz do JSON\",\n        de_DE: \"Formular zur JSON\"\n    },\n    language: {\n        en_US: \"Language\",\n        pl_PL: \"Język\",\n        de_DE: \"Sprache\"\n    },\n    en_US: {\n        en_US: \"English\",\n        pl_PL: \"Angielski\",\n        de_DE: \"Englisch\"\n    },\n    de_DE: {\n        en_US: \"German\",\n        pl_PL: \"Niemiecki\",\n        de_DE: \"Deutsch\"\n    },\n    pl_PL: {\n        en_US: \"Polish\",\n        pl_PL: \"Polski\",\n        de_DE: \"Polnisch\"\n    },\n};\n\nfunction Core() {\n    const translated = useLittera(translations);\n    const { locale, locales, setLocale } = useLitteraMethods();\n\n    const handleLocaleChange = (event: any) => {\n        setLocale(event?.target?.value ?? locale);\n    }\n\n    return (\n        <div style={{ flex: 1, backgroundColor: \"#eee\", padding: \"10px 20px\" }}>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h3\" gutterBottom>{translated.title}</Typography>\n                <Flex>\n                    <TextField\n                        style={{flex: 1, margin: \"0 10px\"}}\n                        id=\"standard-select-type\"\n                        select\n                        label={translated.language}\n                        value={locale}\n                        onChange={handleLocaleChange}\n                        variant=\"outlined\"\n                    >\n                        {locales.map((loc: any) => (\n                            <MenuItem key={loc} value={loc}>\n                                {translated[loc as \"en_US\" | \"de_DE\" | \"pl_PL\"]}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Flex>\n            </Flex>\n        </div>\n    );\n}\n\nexport default Core;\n","import React from 'react';\nimport Core from './core';\nimport Header from \"./shared/Header\";\nimport { LitteraProvider } from \"react-littera\";\nimport { SnackbarProvider } from 'notistack';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <LitteraProvider initialLocale=\"pl_PL\" locales={[ \"en_US\", \"pl_PL\", \"de_DE\" ]}>\n          <Header />\n          <Core />\n        </LitteraProvider>\n      </SnackbarProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}