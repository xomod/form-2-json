{"version":3,"sources":["components/utils/Flex.tsx","utils/methods.ts","components/core/Form/CopyForm.tsx","components/core/Form/NewFieldForm.tsx","components/core/Form/FieldInputs/ArrayInput.tsx","components/core/Form/FieldInputs/BooleanInput.tsx","components/core/Form/FieldInputs/NumberInput.tsx","components/core/Form/FieldInputs/StringInput.tsx","components/core/Form/FieldInputs/index.tsx","components/core/Form/index.tsx","components/core/Output/index.tsx","components/core/index.tsx","components/shared/Header.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Flex","props","reducedProps","_props","args","key","includes","reduceProps","style","Object","freeze","display","rootEl","rootComponent","React","createElement","cloneElement","onClick","className","children","makeTarget","label","toLowerCase","replace","makeJSON","fields","json","forEach","field","target","value","tryPasteJSON","a","navigator","clipboard","readText","raw_content","content","JSON","parse","console","error","translations","copySuccess","en_US","pl_PL","de_DE","copyError","pasteSuccess","pasteError","CopyForm","translated","useLittera","enqueueSnackbar","useSnackbar","handlePaste","Array","isArray","overwriteFields","variant","alignItems","justifyContent","IconButton","copy","stringify","err","color","preset","type","submit","string","number","boolean","array","NewFieldForm","newFieldName","handleNewFieldTypeChange","handleNewFieldValueChange","handleFieldAddition","newFieldType","backgroundColor","padding","width","TextField","flex","onChange","margin","id","select","FIELD_TYPE_OPTIONS","map","option","MenuItem","Button","height","filter","createFilterOptions","add","ArrayInput","Autocomplete","multiple","event","newValue","newValues","nv","inputValue","filterOptions","options","params","filtered","push","title","selectOnFocus","clearOnBlur","handleHomeEndKeys","defaultValue","v","toString","marginTop","marginBottom","marginRight","getOptionLabel","renderOption","freeSolo","renderInput","true","false","BooleanInput","val","NumberInput","StringInput","FieldInput","Message","useStyles","makeStyles","theme","root","fieldRoot","opacity","transition","form","overflowY","Form","useState","setNewFieldName","setNewFieldType","classes","flexDirection","Typography","noValidate","autoComplete","Tooltip","FIELD_TYPE_ICONS","setField","aria-label","removeField","find","addField","FIELD_TYPE_DEFAULTS_MAP","pre","borderRadius","position","overflow","fontSize","paddingTop","maxHeight","Output","output","message","INITIAL_STATE","defaultTypeIconProps","size","Core","setFields","_fields","getField","initialValue","alert","language","useLitteraMethods","locale","locales","setLocale","fontWeight","gutterBottom","loc","createMuiTheme","palette","primary","main","App","ThemeProvider","maxSnack","initialLocale","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e4a518fd.chunk.js","sourcesContent":["import React from \"react\";\n\ntype FlexAlignType =\n  | 'flex-start'\n  | 'flex-end'\n  | 'center'\n  | 'stretch'\n  | 'baseline'\n\ntype FlexProperties = {\n  inline?: boolean\n  flexDirection?: 'row' | 'column' | 'row-reverse' | 'column-reverse'\n  flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse'\n  justifyContent?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n  alignContent?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'stretch'\n    | 'space-between'\n    | 'space-around'\n  alignItems?: FlexAlignType\n}\n\ntype FlexProps = {\n  children: React.ReactNode\n  className?: string\n  onClick?: () => void\n  rootComponent?: React.Component\n  style?: object\n  width?: number | string\n  height?: number | string\n} & FlexProperties\n\nconst reduceProps = (props: FlexProps, ...args: string[]) => {\n    let _props = {...props};\n\n    for(var key in _props) {\n        // @ts-ignore\n        if(args.includes(key)) delete _props[key];\n    }\n\n    return _props;\n}\n\n/**\n * A component for easier flex-box implementation.\n * @example <Flex justifyContent=\"space-between\" alignItems=\"center\">...</Flex>\n */\nconst Flex = (props: FlexProps) => {\n  const reducedProps = reduceProps(props, \"children\", \"className\");\n\n  const style = Object.freeze({\n      display: \"flex\",\n      ...reducedProps,\n      ...props.style\n  });\n\n  const rootEl = props.rootComponent ?? React.createElement(\"div\");\n\n  return React.cloneElement(rootEl as React.ReactElement<any>, { onClick: props.onClick, style, className: props.className, children: props.children });\n}\n\nexport default Flex;","import { Field } from \"../components/core\";\n\nexport function makeTarget(label: Field[\"label\"]) {\n    return label.toLowerCase().replace(/ /g, \"_\"); // eg. First name => first_name\n    \n}\n\nexport function makeJSON(fields: Field[]) {\n    const json: {[key: string]: Field[\"value\"]} = {};\n\n    fields.forEach(field => {\n        json[field.target] = field.value;\n    });\n\n    return json;\n}\n\nexport const tryPasteJSON = async (): Promise<Field[] | null> => {\n    const raw_content = await navigator.clipboard.readText();\n\n    try {\n        const content = JSON.parse(raw_content) as Field[];\n        return content;\n    } catch (err) {\n        console.error(err)\n        return null;\n    }\n}","import { IconButton } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Field } from \"..\";\nimport Flex from \"../../utils/Flex\";\nimport copy from \"copy-to-clipboard\";\nimport { tryPasteJSON } from \"../../../utils/methods\";\nimport { useSnackbar } from \"notistack\";\n\nimport CopyIcon from '@material-ui/icons/FileCopy';\nimport PasteIcon from '@material-ui/icons/Assignment';\nimport { useLittera } from \"react-littera\";\n\nconst translations = {\n    copySuccess: {\n        en_US: \"Form template copied to clipboard\",\n        pl_PL: \"Szablon formularza skopiowany do schowka\",\n        de_DE: \"Formularvorlage in Zwischenablage kopiert\",\n    },\n    copyError: {\n        en_US: \"Couldn't copy to clipboard\",\n        pl_PL: \"Nie udało się skopiować do schowka\",\n        de_DE: \"In die Zwischenablage konnte nicht kopiert werden\",\n    },\n    pasteSuccess: {\n        en_US: \"Form template pasted from clipboard\",\n        pl_PL: \"Szablon formularza wklejony ze schowka\",\n        de_DE: \"Formularvorlage aus der Zwischenablage eingefügt\",\n    },\n    pasteError: {\n        en_US: \"Couldn't paste from clipboard\",\n        pl_PL: \"Nie udało się wkleić ze schowka\",\n        de_DE: \"Konnte nicht aus der Zwischenablage eingefügt werden\",\n    },\n}\n\nconst CopyForm = (props: { fields: Field[], overwriteFields: (value: Field[]) => void }) => {\n    const translated = useLittera(translations);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handleCopy = () => {\n        try {\n            copy(JSON.stringify(props.fields));\n            enqueueSnackbar(translated.copySuccess, { variant: 'info' });\n        } catch (err) {\n            enqueueSnackbar(translated.copyError, { variant: 'error' });\n        }\n    }\n\n    const handlePaste = async () => {\n        const value = await tryPasteJSON();\n\n        if (value !== null && Array.isArray(value)) {\n            props.overwriteFields(value);\n            enqueueSnackbar(translated.pasteSuccess, { variant: 'info' });\n        } else {\n            enqueueSnackbar(translated.pasteError, { variant: 'error' });\n        }\n    }\n\n    return <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <IconButton onClick={handleCopy} color=\"primary\" ><CopyIcon /></IconButton>\n        <IconButton onClick={handlePaste} color=\"primary\"><PasteIcon /></IconButton>\n    </Flex>\n}\n\n\n\nexport default CopyForm;","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport Flex from '../../utils/Flex';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { FIELD_TYPE_OPTIONS } from \"../\";\nimport { ITranslationsPreset, useLittera } from 'react-littera';\n\nconst translations = (preset: ITranslationsPreset) => ({\n    label: {\n        en_US: \"Field label\",\n        pl_PL: \"Etykieta pola\",\n        de_DE: \"Feldbezeichnung\",\n    },\n    type: {\n        en_US: \"Field type\",\n        pl_PL: \"Typ pola\",\n        de_DE: \"Feldtyp\",\n    },\n    submit: {\n        en_US: \"Add field\",\n        pl_PL: \"Dodaj pole\",\n        de_DE: \"Feld hinzufügen\",\n    },\n    string: preset.string,\n    number: preset.number,\n    boolean: preset.boolean,\n    array: preset.array,\n})\n\ntype NewFieldFormProps = {\n    newFieldName: string;\n    handleNewFieldValueChange: (event: any) => void;\n    newFieldType: string;\n    handleNewFieldTypeChange: (event: any) => void;\n    handleFieldAddition: () => void;\n};\n\nexport function NewFieldForm({ newFieldName, handleNewFieldTypeChange, handleNewFieldValueChange, handleFieldAddition, newFieldType }: NewFieldFormProps) {\n    const translated = useLittera(translations);\n\n    return <Flex alignItems=\"center\" style={{ backgroundColor: \"#eee\", padding: \"10px 0\" }} justifyContent=\"flex-start\" width=\"100%\">\n        <TextField color=\"primary\" label={translated.label} style={{ flex: 2 }} value={newFieldName} variant=\"filled\" onChange={handleNewFieldValueChange} />\n\n\n        <TextField\n            style={{ flex: 1, margin: \"0 10px\" }}\n            id=\"standard-select-type\"\n            select\n            label={translated.type}\n            value={newFieldType}\n            onChange={handleNewFieldTypeChange}\n            variant=\"filled\"\n            color=\"primary\"\n        >\n            {FIELD_TYPE_OPTIONS.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                    {translated[option.value]}\n                </MenuItem>\n            ))}\n        </TextField>\n\n        <Button color=\"primary\" style={{ height: \"56px\", flex: 1 }} variant=\"outlined\" onClick={handleFieldAddition}>{translated.submit}</Button>\n    </Flex>;\n}\n","import { TextField } from \"@material-ui/core\";\nimport { Autocomplete, createFilterOptions } from \"@material-ui/lab\";\nimport React from \"react\";\nimport { useLittera } from \"react-littera\";\nimport { Field } from \"../..\";\n\nconst filter = createFilterOptions<OptionType>();\n\nconst translations = {\n    add: (value: string) => ({\n        en_US: `Add '${value}'`,\n        pl_PL: `Dodaj '${value}'`,\n        de_DE: `'${value}' hinzufügen`\n    }),\n}\n\nconst ArrayInput = ({ field, onChange }: { field: Field, onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const translated = useLittera(translations);\n\n    return <Autocomplete\n        multiple\n        onChange={(event, newValue: Array<any>) => {\n            const newValues = newValue.map(nv => typeof nv !== \"string\" ? nv.inputValue : nv);\n            onChange({ target: { value: newValues } } as unknown as React.ChangeEvent<HTMLInputElement>)\n        }}\n        filterOptions={(options, params) => {\n            const filtered = filter(options, params);\n\n            // Suggest the creation of a new value\n            if (params.inputValue !== '') {\n                filtered.push({\n                    inputValue: params.inputValue,\n                    title: translated.add(params.inputValue),\n                });\n            }\n\n            return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        id=\"free-solo-with-text-demo\"\n        defaultValue={(((field.value as Array<any>).map(v => ({ inputValue: v, title: v.toString() }))) ?? []) as OptionType[]}\n        options={(((field.value as Array<any>).map(v => ({ inputValue: v, title: v.toString() }))) ?? []) as OptionType[]}\n        style={{ marginTop: \"20px\", marginBottom: \"20px\", marginRight: \"10px\", width: \"85%\" }}\n        getOptionLabel={(option) => option.inputValue?.toString() ?? option?.toString() ?? \"\"}\n        renderOption={(option) => option.title}\n        freeSolo\n        renderInput={(params) => (\n            <TextField {...params} label={field.label} variant=\"outlined\" />\n        )}\n    />\n}\n\ninterface OptionType {\n    inputValue?: string;\n    title: string;\n}\n\nexport default ArrayInput;","import { MenuItem, TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useLittera } from \"react-littera\";\nimport { Field } from \"../..\";\n\nconst translations = {\n    true: {\n        en_US: \"Yes\",\n        pl_PL: \"Tak\",\n        de_DE: \"Ja\"\n    },\n    false: {\n        en_US: \"No\",\n        pl_PL: \"Nie\",\n        de_DE: \"Nein\"\n    },\n}\n\nconst BooleanInput = ({ field, onChange }: { field: Field, onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n    const translated = useLittera(translations);\n\n    return <TextField\n        style={{ marginTop: \"20px\", marginBottom: \"20px\", marginRight: \"10px\", width: \"85%\" }}\n        select\n        label={field.label}\n        value={field.value}\n        onChange={onChange}\n        variant=\"outlined\"\n    >\n        {[{ value: \"true\", label: \"True\" }, { value: \"false\", label: \"False\" }].map((val: { value: string, label: string }) => (\n            <MenuItem key={val.label} value={val.value}>\n                {translated[val.value as \"true\" | \"false\"]}\n            </MenuItem>\n        ))}\n    </TextField>;\n}\n\nexport default BooleanInput;","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Field } from \"../..\";\n\nconst NumberInput = ({ field, onChange }: { field: Field, onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n\n    return <TextField type={\"number\"} style={{ marginTop: \"20px\", marginBottom: \"20px\", marginRight: \"10px\", width: \"85%\" }} value={field.value} onChange={onChange} id={field.target} key={field.target} label={field.label} variant=\"outlined\" />\n}\n\nexport default NumberInput;","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Field } from \"../..\";\n\nconst StringInput = ({ field, onChange }: { field: Field, onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n\n    return <TextField type={\"text\"} style={{ marginTop: \"20px\", marginBottom: \"20px\", marginRight: \"10px\", width: \"85%\" }} value={field.value} onChange={onChange} id={field.target} key={field.target} label={field.label} variant=\"outlined\" />\n}\n\nexport default StringInput;","import { Message } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { Field } from \"../..\";\n\nimport ArrayInput from \"./ArrayInput\";\nimport BooleanInput from \"./BooleanInput\";\nimport NumberInput from \"./NumberInput\";\nimport StringInput from \"./StringInput\";\n\nconst FieldInput = ({ field, onChange }: { field: Field, onChange: (event: React.ChangeEvent<HTMLInputElement>) => void }) => {\n\n    if (field.type === \"number\")\n        return <NumberInput field={field} onChange={onChange} />\n    if (field.type === \"string\")\n        return <StringInput field={field} onChange={onChange} />\n    if (field.type === \"boolean\")\n        return <BooleanInput field={field} onChange={onChange} />\n    if (field.type === \"array\")\n        return <ArrayInput field={field} onChange={onChange} />\n\n    return <Message>Something went wrong...</Message>\n}\n\nexport default FieldInput;","import React, { useState } from 'react';\nimport { Field, FIELD_TYPE_DEFAULTS_MAP, FIELD_TYPE_ICONS } from \"../index\";\nimport { IconButton, Tooltip, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/styles';\nimport Flex from '../../utils/Flex';\nimport CopyForm from './CopyForm';\nimport { NewFieldForm } from './NewFieldForm';\nimport FieldInput from './FieldInputs';\nimport { ITranslationsPreset, useLittera } from 'react-littera';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: \"#eee\",\n    padding: \"20px 30px\",\n    flex: 1,\n    height: \"calc(100vh - 104px)\",\n  },\n  fieldRoot: {\n    \"&> span\": {\n      opacity: 0,\n      transition: \"opacity 255ms ease\"\n    },\n    \"&:hover\": {\n      \"&> span\": {\n        opacity: 1,\n        transition: \"opacity 255ms ease\"\n      }\n    }\n  },\n  form: {\n    flex: 1,\n    overflowY: \"scroll\"\n  }\n}));\n\nconst translations = (preset: ITranslationsPreset) => ({\n  title: {\n    en_US: \"Form\",\n    pl_PL: \"Formularz\",\n    de_DE: \"Formular\",\n  },\n  string: preset.string,\n  number: preset.number,\n  boolean: preset.boolean,\n  array: preset.array,\n})\n\ntype FormProps = { \n  fields:   Field[];\n  getField: (target: Field[\"target\"]) => Field | undefined;\n  setField: (target: Field[\"target\"], value: Field[\"value\"]) => void;\n  addField: (label: Field[\"label\"], type: Field[\"type\"], initialValue?: Field[\"value\"]) => void;\n  removeField: (target: Field[\"target\"]) => void;\n  overwriteFields: (value: Field[]) => void;\n}\n\nfunction Form(props: FormProps ) {\n  const [newFieldName, setNewFieldName] = useState(\"\");\n  const [newFieldType, setNewFieldType] = useState<Field[\"type\"]>(\"string\");\n  const classes = useStyles();\n  const translated = useLittera(translations)\n\n  const handleChange = (target: Field[\"target\"]) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event?.target?.value ?? \"\";\n    props.setField(target, value);\n  }\n\n  const handleNewFieldValueChange = (event: any) => setNewFieldName(event?.target?.value ?? \"\")\n  const handleFieldAddition = () => {\n    if(newFieldName && newFieldType && !props.fields.find(field => field.target === newFieldName)) {\n      props.addField(newFieldName, newFieldType, FIELD_TYPE_DEFAULTS_MAP[newFieldType]);\n      setNewFieldName(\"\");\n    }\n  }\n\n  const handleNewFieldTypeChange = (event: any) => {\n    setNewFieldType(event?.target?.value ?? \"string\");\n  };\n\n  return (\n    <Flex flexDirection=\"column\" justifyContent=\"space-between\" className={classes.root}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Typography variant=\"h4\">{translated.title}</Typography>\n        <CopyForm fields={props.fields} overwriteFields={props.overwriteFields} />\n      </Flex>\n      <form className={classes.form} noValidate autoComplete=\"off\">\n      <Flex flexDirection=\"column\" width=\"100%\">\n        {\n          props.fields.map(field => {\n            return <Flex className={classes.fieldRoot} key={field.label + field.target} alignItems=\"center\" justifyContent=\"space-between\" width=\"100%\">\n              <Tooltip title={translated[field.type]}>{FIELD_TYPE_ICONS[field.type]}</Tooltip>\n              <FieldInput field={field} onChange={handleChange(field.target)} />\n              <span><IconButton aria-label=\"delete\" onClick={() => props.removeField(field.target)}><DeleteIcon /></IconButton></span>\n            </Flex>\n          })\n        }\n      </Flex>\n    </form>\n\n      <NewFieldForm newFieldName={newFieldName} handleNewFieldValueChange={handleNewFieldValueChange} newFieldType={newFieldType} handleNewFieldTypeChange={handleNewFieldTypeChange} handleFieldAddition={handleFieldAddition} />\n\n    </Flex>\n  );\n}\n\nexport default Form;\n","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from \"@material-ui/styles\";\nimport React from 'react';\nimport { Field } from '..';\nimport copy from \"copy-to-clipboard\";\nimport { makeJSON } from '../../../utils/methods';\nimport { useLittera } from 'react-littera';\nimport { useSnackbar } from 'notistack';\n\nconst useStyles = makeStyles((theme) => ({\n  pre: {\n    padding: \"12px 18px\",\n    backgroundColor: \"#f4f4f4\",\n    borderRadius: 16,\n    position: \"relative\",\n    overflow: \"auto\",\n    fontSize: \"1.3rem\",\n  },\n  root: { width: \"30%\", padding: \"20px 30px\", paddingTop: \"32px\", flex: 1, height: \"100%\", maxHeight: \"95vh\", position: \"relative\" }\n}))\n\nconst translations = {\n  copy: {\n    en_US: \"Copy\",\n    pl_PL: \"Skopiuj\",\n    de_DE: \"Einfügen\"\n  },\n  title: {\n    en_US: \"Result\",\n    pl_PL: \"Wynik\",\n    de_DE: \"Ergebnis\"\n  },\n  copySuccess: {\n    en_US: \"JSON copied to clipboard\",\n    pl_PL: \"JSON skopiowany do schowka\",\n    de_DE: \"JSON in Zwischenablage kopiert\",\n  },\n  copyError: {\n    en_US: \"Couldn't copy to clipboard\",\n    pl_PL: \"Nie udało się skopiować do schowka\",\n    de_DE: \"In die Zwischenablage konnte nicht kopiert werden\",\n  },\n}\n\nfunction Output(props: {fields: Field[]}) {\n  const translated = useLittera(translations);\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleCopy = () => {\n    try {\n      const output = JSON.stringify(makeJSON(props.fields), null, 2);\n\n      if (output && JSON.parse(output)) {\n        copy(output);\n        enqueueSnackbar(translated.copySuccess, { variant: 'info' });\n      } else {\n        enqueueSnackbar(translated.copyError, { variant: 'error' });\n      }\n    } catch (err) {\n      enqueueSnackbar(err.message || translated.copyError, { variant: 'error' });\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\">{translated.title}</Typography>\n      <pre className={classes.pre}>{JSON.stringify(makeJSON(props.fields), null, 2)}</pre>\n      <Button variant=\"outlined\" onClick={handleCopy}>{translated.copy}</Button>\n    </div>\n  );\n}\n\nexport default Output;","import React, { useState } from 'react';\nimport Flex from '../utils/Flex';\nimport Form from './Form';\nimport Output from './Output';\nimport { makeStyles } from \"@material-ui/styles\"\nimport { makeTarget } from \"../../utils/methods\";\n\nimport StringIcon from \"@material-ui/icons/TextFields\";\nimport NumberIcon from \"@material-ui/icons/Dialpad\";\nimport BooleanIcon from \"@material-ui/icons/Cached\";\nimport ArrayIcon from \"@material-ui/icons/Reorder\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: \"relative\",\n        height: `calc(100vh - 76px)`,\n    }\n}))\n\nexport type Field = { value: FieldType, target: string, label: string, type: FieldTypeLiteral }\nexport type FieldType = string | number | boolean | FieldType[];\nexport type FieldTypeLiteral = \"string\" | \"number\" | \"boolean\" | \"array\";\n\nconst INITIAL_STATE: Field[] = [\n    { value: \"Foo\", target: \"first_name\", label: \"First name\", type: \"string\" },\n    { value: \"Bar\", target: \"last_name\", label: \"Last name\", type: \"string\" },\n    { value: \"https://lol.com/url.jpg\", target: \"image\", label: \"Image\", type: \"string\" },\n    { value: 18, target: \"age\", label: \"Age\", type: \"number\" },\n    { value: true, target: \"bored\", label: \"Bored\", type: \"boolean\" },\n    { value: [\"01\", \"02\"], target: \"labs\", label: \"Labs\", type: \"array\" },\n]\n\ntype FieldTypeOption = { value: FieldTypeLiteral, label: string }\nexport const FIELD_TYPE_OPTIONS: FieldTypeOption[] = [\n    {\n        value: 'string',\n        label: 'Text',\n    },\n    {\n        value: 'number',\n        label: 'Number',\n    },\n    {\n        value: \"boolean\",\n        label: \"Boolean\"\n    },\n    {\n        value: \"array\",\n        label: \"Array\"\n    }\n];\n\nconst defaultTypeIconProps = {\n    size: \"16px\",\n    style: { marginRight: \"10px\" }\n}\ntype FieldTypeIcons = { [key in FieldTypeLiteral]: JSX.Element }\nexport const FIELD_TYPE_ICONS: FieldTypeIcons = {\n    string: <StringIcon     {...defaultTypeIconProps} />,\n    number: <NumberIcon     {...defaultTypeIconProps} />,\n    boolean: <BooleanIcon    {...defaultTypeIconProps} />,\n    array: <ArrayIcon      {...defaultTypeIconProps} />\n}\n\ntype FieldTypeDefault = { [key in FieldTypeLiteral]: FieldType }\nexport const FIELD_TYPE_DEFAULTS_MAP: FieldTypeDefault = {\n    boolean: false,\n    number: 0,\n    string: \"\",\n    array: [],\n}\n\nfunction Core() {\n    const classes = useStyles();\n    const [fields, setFields] = useState(INITIAL_STATE);\n    \n    const getField = (target: Field[\"target\"]) => {\n        return fields.find(field => field.target === target);\n     }\n     const setField = (target: Field[\"target\"], value: Field[\"value\"]) => {\n        setFields(_fields => \n            _fields.map(field => field.target === target ? {...field, value} : field)\n        )\n    }\n    const addField = (label: Field[\"label\"], type: Field[\"type\"], initialValue: Field[\"value\"] = \"\") => {\n        setFields(_fields => {\n            if(_fields.find(field => makeTarget(label) === field.target)) {\n                alert(\"Field already exists!\");\n                return _fields;\n            }\n\n            return ([..._fields, { label, target: makeTarget(label), value: initialValue, type }])\n        } );\n    }\n    const removeField = (target: Field[\"target\"]) => {\n        setFields(_fields => _fields.filter(field => field.target !== target));\n    }\n    const overwriteFields = (value: Field[]) => {\n        setFields(value);\n    }\n\n    return (\n        <div className={classes.root}>\n            <Flex alignItems=\"flex-start\" height=\"100%\">\n                <Form fields={fields} setField={setField} getField={getField} addField={addField} removeField={removeField} overwriteFields={overwriteFields} />\n                <Output fields={fields} />\n            </Flex>\n        </div>\n    );\n}\n\nexport default Core;\n","import React from 'react';\nimport { useLittera, useLitteraMethods } from \"react-littera\";\nimport { Typography, TextField, MenuItem } from \"@material-ui/core\"\nimport Flex from \"../utils/Flex\";\n\nconst translations = {\n    title: {\n        en_US: \"form-2-json\", //\"Form to JSON\",\n        pl_PL: \"form-2-json\", //\"Formularz do JSON\",\n        de_DE: \"form-2-json\", //\"Formular zur JSON\"\n    },\n    language: {\n        en_US: \"Language\",\n        pl_PL: \"Język\",\n        de_DE: \"Sprache\"\n    },\n    en_US: {\n        en_US: \"English\",\n        pl_PL: \"Angielski\",\n        de_DE: \"Englisch\"\n    },\n    de_DE: {\n        en_US: \"German\",\n        pl_PL: \"Niemiecki\",\n        de_DE: \"Deutsch\"\n    },\n    pl_PL: {\n        en_US: \"Polish\",\n        pl_PL: \"Polski\",\n        de_DE: \"Polnisch\"\n    },\n};\n\nfunction Core() {\n    const translated = useLittera(translations);\n    const { locale, locales, setLocale } = useLitteraMethods();\n\n    const handleLocaleChange = (event: any) => {\n        setLocale(event?.target?.value ?? locale);\n    }\n\n    return (\n        <div style={{ flex: 1, backgroundColor: \"#eee\", padding: \"10px 20px\" }}>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h4\" style={{ opacity: 0.15, fontWeight: \"bold\" }} gutterBottom>{translated.title.toLowerCase()}</Typography>\n                <Flex>\n                    <TextField\n                        style={{flex: 1, margin: \"0 10px\"}}\n                        id=\"standard-select-type\"\n                        select\n                        label={translated.language}\n                        value={locale}\n                        onChange={handleLocaleChange}\n                        variant=\"outlined\"\n                    >\n                        {locales.map((loc: any) => (\n                            <MenuItem key={loc} value={loc}>\n                                {translated[loc as \"en_US\" | \"de_DE\" | \"pl_PL\"]}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Flex>\n            </Flex>\n        </div>\n    );\n}\n\nexport default Core;\n","import React from 'react';\nimport Core from './core';\nimport Header from \"./shared/Header\";\nimport { LitteraProvider } from \"react-littera\";\nimport { SnackbarProvider } from 'notistack';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst preset = {\n  string: {\n    en_US: \"Text\",\n    pl_PL: \"Tekst\",\n    de_DE: \"Text\",\n  },\n  boolean: {\n    en_US: \"Switch\",\n    pl_PL: \"Przełącznik\",\n    de_DE: \"Schalter\",\n  },\n  number: {\n    en_US: \"Number\",\n    pl_PL: \"Liczba\",\n    de_DE: \"Nummer\",\n  },\n  array: {\n    en_US: \"List\",\n    pl_PL: \"Lista\",\n    de_DE: \"Liste\",\n  }\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#F6406E\"\n    }\n  }\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <SnackbarProvider maxSnack={3}>\n          <LitteraProvider preset={preset} initialLocale=\"pl_PL\" locales={[\"en_US\", \"pl_PL\", \"de_DE\"]}>\n            <Header />\n            <Core />\n          </LitteraProvider>\n        </SnackbarProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}